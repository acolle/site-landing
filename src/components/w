/* --- Packages and Components --- */
import React from 'react';
import styled, { css } from 'styled-components';
import anime from 'animejs';
import ReactDOM from 'react-dom';

import { mediaSize } from '../data/siteTools';
// import FloatingBubble from '../components/FloatingBubble';


const ComponentContainer = styled.div`
  width: 100%;
  height: 100%;
`;

const Bubble = styled.div`
  width: 5em;
  height: 5em;
  border-radius: 50%;
  background-color: black;

  transform: ${props => `translate(${props.posX}px, ${props.posY}px)`};

  will-change: transform, opacity;
`;


class ScrollingSponsorPane extends React.Component {
  static noise(xVal) {
    let perlin;
    const PERLIN_ZWRAPB = 8;
    const PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB; // eslint-disable-line
    const PERLIN_SIZE = 4095;
    const perlinOctaves = 4;
    const perlinAmpFalloff = .5;
    const scaledCosine = (xVal) => {
            return .5 * (1 - Math.cos(xVal * Math.PI))
        };
    if (perlin == null) {
        perlin = new Array(PERLIN_SIZE + 1);
        for (var n = 0; n < PERLIN_SIZE + 1; n++) perlin[n] = Math.random()
    }
    xVal < 0 && (xVal = -xVal);
    for (var t, o, i = Math.floor(xVal), r = xVal - i, a = 0, s = .5, l = 0; l < perlinOctaves; l++) {

      t = scaledCosine(r);

       o = perlin[i & PERLIN_SIZE];

        o += t * (perlin[i + 1 & PERLIN_SIZE] - o);

         a += o * s;

          s *= perlinAmpFalloff;
          i <<= 1, (r *= 2) >= 1 && (i++, r--);
    }

    return a;
  }

  static thing(e, n, t) {
      return e * (1 - t) + n * t;
  }

  static thing2(e) {
      return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1
  }


  constructor(props) {
    super(props);

    this.state = {
      bubbles: [
        { x: Math.random() * (1500 - 1000) + 1000, y: 0 },
        { x: Math.random() * (1500 - 1000) + 1000, y: 40 },
        { x: Math.random() * (1500 - 1000) + 1000, y: 80 },
        { x: Math.random() * (1500 - 1000) + 1000, y: 120 },
        { x: Math.random() * (1500 - 1000) + 1000, y: 160 },
        { x: Math.random() * (1500 - 1000) + 1000, y: 200 },
        { x: Math.random() * (1500 - 1000) + 1000, y: 240 },
        { x: Math.random() * (1500 - 1000) + 1000, y: 280 },
        { x: Math.random() * (1500 - 1000) + 1000, y: 320 },
      ]
    };

    const newBubbles = this.state.bubbles.map((bubble) => {
      bubble.seedX = 1e4 * Math.random();
      bubble.seedY = 1e4 * Math.random();
      bubble.noiseX = 0;
      bubble.noiseY = 0;
      return bubble;
    });

    this.setState({bubbles: newBubbles});
  }

  componentDidMount() {
    this.animateBubbles = this.animateBubbles.bind(this);
    this.noiseSpeed = 55e-6;
    this.noiseScale = 80;
    this.noiseT = 0;
    this.scrollX = 0;

    requestAnimationFrame(this.animateBubbles); // eslint-disable-line
  }

  getNewBubblePos(e) {
    let newPosX = e.x + e.noiseX;
    let newPosY = e.y + e.noiseY;

    this.pane = this.pane;
    // newPosY = thing(newPosY, this.pane.containerHeight / 2, this.pane.vertShrink * this.pane.maxShrink);
    // newPosX < -200 && (e.x += c.containerWidth);
    return [newPosX, newPosY];
  }

  animateBubbles() {
    this.setState((prevState) => {
      const newBubbles = prevState.bubbles.map((bubble) => {
        bubble.noiseX = this.constructor.noise(bubble.seedX + this.noiseT) * this.noiseScale - this.noiseScale / 2;
        bubble.noiseY = this.constructor.noise(bubble.seedY + this.noiseT) * this.noiseScale - this.noiseScale / 2;
        const newBubblePos = this.getNewBubblePos(bubble);
        bubble.x += newBubblePos[0];
        bubble.y += newBubblePos[1];
        return bubble;
      });
      return {bubbles: newBubbles};
    });

    requestAnimationFrame(this.animateBubbles); // eslint-disable-line
  }






  render() {
    return (
      <ComponentContainer
        className={this.props.className}
        ref={elem => {
          this.pane = elem;
        }}
      >
        {this.state.bubbles.map((bubble, i) =>
          <div style={{width: "9em", height: "9em", borderRadius: "50%", backgroundColor: "black", transform: `translate(${bubble.x}px, ${bubble.y}px)`, willChange: "transform"}} />
        )}
      </ComponentContainer>
    );
  }

}


export default ScrollingSponsorPane;









/*



import React from 'react';
import styled from 'styled-components';

import { mediaSize } from '../data/siteTools';
import FloatingBubble from '../components/FloatingBubble';



const ComponentContainer = styled.div`
  width: 100%;
  height: 100%;
`;

const ContentContainer = styled.div`

`;

const Bubble = styled.div`
  display: inline-block;
  position: relative;
  width: 2em;
  height: 2em;
  border-radius: 50%;
  background-color: black;
  left: ${props => props.posX}px;
  top: ${props => props.posY}px;
`


class ScrollingSponsorPane extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      bubbles: [
        { name: "Facebook", logoSrc: "fb_log.png", posX: 0, posY: 0, tier: 2 },
        { name: "Google", logoSrc: "fb_log.png", posX: 20, posY: 40, tier: 2 },
        { name: "UWaterloo", logoSrc: "fb_log.png", posX: 12, posY: 94, tier: 2 },
        { name: "Feridun", logoSrc: "fb_log.png", posX: 0, posY: 40, tier: 2 },
      ]
    };

    setInterval(() => this.floatBubbles(), 20);
  }

  floatBubbles() {
    console.log('floating bubbles');
    const newBubbles = this.state.bubbles.map((bubble, i) => {
      bubble.posX -= 1;
      if(bubble.posX < -100) bubble.posX = 100;
      return bubble;
    });
    console.log(newBubbles);
    this.setState({bubbles: newBubbles});
  }

  render() {
    return (
      <ComponentContainer className={this.props.className}>
        {this.state.bubbles.map(bubble =>
          <Bubble key={bubble.name} posX={bubble.posX} posY={bubble.posY}>test</Bubble>
        )}
      </ComponentContainer>
    );
  }

}


export default ScrollingSponsorPane;



*/
